To apply a mutant on disk:
    mutmut apply <id>

To show a mutant:
    mutmut show <id>


Suspicious ü§î (8)

---- ./program187.py (8) ----

# mutant 1
--- ./program187.py
+++ ./program187.py
@@ -19,7 +19,7 @@
 # ============================================
 def longest_common_subsequence(X, Y, m, n): 
 
-    if m == 0 or n == 0: 
+    if m != 0 or n == 0: 
 
        return 0 
 

# mutant 3
--- ./program187.py
+++ ./program187.py
@@ -19,7 +19,7 @@
 # ============================================
 def longest_common_subsequence(X, Y, m, n): 
 
-    if m == 0 or n == 0: 
+    if m == 0 or n != 0: 
 
        return 0 
 

# mutant 7
--- ./program187.py
+++ ./program187.py
@@ -23,7 +23,7 @@
 
        return 0 
 
-    elif X[m-1] == Y[n-1]: 
+    elif X[m+1] == Y[n-1]: 
 
        return 1 + longest_common_subsequence(X, Y, m-1, n-1) 
 

# mutant 9
--- ./program187.py
+++ ./program187.py
@@ -23,7 +23,7 @@
 
        return 0 
 
-    elif X[m-1] == Y[n-1]: 
+    elif X[m-1] != Y[n-1]: 
 
        return 1 + longest_common_subsequence(X, Y, m-1, n-1) 
 

# mutant 11
--- ./program187.py
+++ ./program187.py
@@ -23,7 +23,7 @@
 
        return 0 
 
-    elif X[m-1] == Y[n-1]: 
+    elif X[m-1] == Y[n-2]: 
 
        return 1 + longest_common_subsequence(X, Y, m-1, n-1) 
 

# mutant 12
--- ./program187.py
+++ ./program187.py
@@ -25,7 +25,7 @@
 
     elif X[m-1] == Y[n-1]: 
 
-       return 1 + longest_common_subsequence(X, Y, m-1, n-1) 
+       return 2 + longest_common_subsequence(X, Y, m-1, n-1) 
 
     else: 
 

# mutant 19
--- ./program187.py
+++ ./program187.py
@@ -29,7 +29,7 @@
 
     else: 
 
-       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))
+       return max(longest_common_subsequence(X, Y, m, n-2), longest_common_subsequence(X, Y, m-1, n))
 
 # TESTING CODE 
 # ============================================

# mutant 20
--- ./program187.py
+++ ./program187.py
@@ -29,7 +29,7 @@
 
     else: 
 
-       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))
+       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m+1, n))
 
 # TESTING CODE 
 # ============================================


Survived üôÅ (1)

---- ./program187.py (1) ----

# mutant 24
--- ./program187.py
+++ ./program187.py
@@ -43,7 +43,7 @@
             expected
         ):
             return "PASSED"
-        return "FAILED"
+        return "XXFAILEDXX"
     except Exception as exception_obj:
         return type(exception_obj).__name__
     

