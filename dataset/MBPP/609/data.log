To apply a mutant on disk:
    mutmut apply <id>

To show a mutant:
    mutmut show <id>


Suspicious ü§î (4)

---- ./program609.py (4) ----

# mutant 3
--- ./program609.py
+++ ./program609.py
@@ -19,7 +19,7 @@
 # ============================================
 def floor_min(A,B,N):
 
-    x = max(B - 1,N)
+    x = None
 
     return (A*x) // B
 

# mutant 5
--- ./program609.py
+++ ./program609.py
@@ -21,7 +21,7 @@
 
     x = max(B - 1,N)
 
-    return (A*x) // B
+    return (A*x) / B
 
 # TESTING CODE 
 # ============================================

# mutant 6
--- ./program609.py
+++ ./program609.py
@@ -26,7 +26,7 @@
 # TESTING CODE 
 # ============================================
 def validate_solution(actual, expected):
-    return actual == expected
+    return actual != expected
 
 def driver(a, b, n, expected):
     try:

# mutant 7
--- ./program609.py
+++ ./program609.py
@@ -34,7 +34,7 @@
             a, b, n),
             expected
         ):
-            return "PASSED"
+            return "XXPASSEDXX"
         return "FAILED"
     except Exception as exception_obj:
         return type(exception_obj).__name__


Survived üôÅ (2)

---- ./program609.py (2) ----

# mutant 2
--- ./program609.py
+++ ./program609.py
@@ -19,7 +19,7 @@
 # ============================================
 def floor_min(A,B,N):
 
-    x = max(B - 1,N)
+    x = max(B - 2,N)
 
     return (A*x) // B
 

# mutant 8
--- ./program609.py
+++ ./program609.py
@@ -35,7 +35,7 @@
             expected
         ):
             return "PASSED"
-        return "FAILED"
+        return "XXFAILEDXX"
     except Exception as exception_obj:
         return type(exception_obj).__name__
     

