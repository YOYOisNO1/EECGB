To apply a mutant on disk:
    mutmut apply <id>

To show a mutant:
    mutmut show <id>


Suspicious ü§î (1)

---- ./program616.py (1) ----

# mutant 3
--- ./program616.py
+++ ./program616.py
@@ -26,7 +26,7 @@
 # TESTING CODE 
 # ============================================
 def validate_solution(actual, expected):
-    return actual == expected
+    return actual != expected
 
 def driver(test_tup1, test_tup2, expected):
     try:


Survived üôÅ (3)

---- ./program616.py (3) ----

# mutant 1
--- ./program616.py
+++ ./program616.py
@@ -19,7 +19,7 @@
 # ============================================
 def tuple_modulo(test_tup1, test_tup2):
 
-  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) 
+  res = tuple(ele1 / ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) 
 
   return (res) 
 

# mutant 2
--- ./program616.py
+++ ./program616.py
@@ -19,7 +19,7 @@
 # ============================================
 def tuple_modulo(test_tup1, test_tup2):
 
-  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) 
+  res = None 
 
   return (res) 
 

# mutant 4
--- ./program616.py
+++ ./program616.py
@@ -34,7 +34,7 @@
             test_tup1, test_tup2),
             expected
         ):
-            return "PASSED"
+            return "XXPASSEDXX"
         return "FAILED"
     except Exception as exception_obj:
         return type(exception_obj).__name__

