To apply a mutant on disk:
    mutmut apply <id>

To show a mutant:
    mutmut show <id>


Survived üôÅ (6)

---- ./program1.py (6) ----

# mutant 1
--- ./program1.py
+++ ./program1.py
@@ -17,7 +17,7 @@
 #
 # SOLUTION CODE
 # ============================================
-R = 3
+R = 4
 
 C = 3
 

# mutant 3
--- ./program1.py
+++ ./program1.py
@@ -19,7 +19,7 @@
 # ============================================
 R = 3
 
-C = 3
+C = 4
 
 def min_cost(cost, m, n): 
 

# mutant 5
--- ./program1.py
+++ ./program1.py
@@ -23,7 +23,7 @@
 
 def min_cost(cost, m, n): 
 
-	tc = [[0 for x in range(C)] for x in range(R)] 
+	tc = [[1 for x in range(C)] for x in range(R)] 
 
 	tc[0][0] = cost[0][0] 
 

# mutant 17
--- ./program1.py
+++ ./program1.py
@@ -29,7 +29,7 @@
 
 	for i in range(1, m+1): 
 
-		tc[i][0] = tc[i-1][0] + cost[i][0] 
+		tc[i][0] = tc[i-2][0] + cost[i][0] 
 
 	for j in range(1, n+1): 
 

# mutant 20
--- ./program1.py
+++ ./program1.py
@@ -29,7 +29,7 @@
 
 	for i in range(1, m+1): 
 
-		tc[i][0] = tc[i-1][0] + cost[i][0] 
+		tc[i][0] = tc[i-1][0] + cost[i][1] 
 
 	for j in range(1, n+1): 
 

# mutant 50
--- ./program1.py
+++ ./program1.py
@@ -55,7 +55,7 @@
             expected
         ):
             return "PASSED"
-        return "FAILED"
+        return "XXFAILEDXX"
     except Exception as exception_obj:
         return type(exception_obj).__name__
     

