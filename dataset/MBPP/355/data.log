To apply a mutant on disk:
    mutmut apply <id>

To show a mutant:
    mutmut show <id>


Suspicious 🤔 (4)

---- ./program355.py (4) ----

# mutant 10
--- ./program355.py
+++ ./program355.py
@@ -25,7 +25,7 @@
 
     diameterSquare = diameter * diameter 
 
-    for a in range(1, 2 * radius):  
+    for a in range(1, 2 / radius):  
 
         for b in range(1, 2 * radius): 
 

# mutant 11
--- ./program355.py
+++ ./program355.py
@@ -27,7 +27,7 @@
 
     for a in range(1, 2 * radius):  
 
-        for b in range(1, 2 * radius): 
+        for b in range(2, 2 * radius): 
 
             diagnalLengthSquare = (a * a +  b * b)  
 

# mutant 14
--- ./program355.py
+++ ./program355.py
@@ -29,7 +29,7 @@
 
         for b in range(1, 2 * radius): 
 
-            diagnalLengthSquare = (a * a +  b * b)  
+            diagnalLengthSquare = (a / a +  b * b)  
 
             if (diagnalLengthSquare <= diameterSquare) : 
 

# mutant 20
--- ./program355.py
+++ ./program355.py
@@ -33,7 +33,7 @@
 
             if (diagnalLengthSquare <= diameterSquare) : 
 
-                rectangles += 1
+                rectangles -= 1
 
     return rectangles 
 


Survived 🙁 (4)

---- ./program355.py (4) ----

# mutant 9
--- ./program355.py
+++ ./program355.py
@@ -25,7 +25,7 @@
 
     diameterSquare = diameter * diameter 
 
-    for a in range(1, 2 * radius):  
+    for a in range(1, 3 * radius):  
 
         for b in range(1, 2 * radius): 
 

# mutant 12
--- ./program355.py
+++ ./program355.py
@@ -27,7 +27,7 @@
 
     for a in range(1, 2 * radius):  
 
-        for b in range(1, 2 * radius): 
+        for b in range(1, 3 * radius): 
 
             diagnalLengthSquare = (a * a +  b * b)  
 

# mutant 18
--- ./program355.py
+++ ./program355.py
@@ -31,7 +31,7 @@
 
             diagnalLengthSquare = (a * a +  b * b)  
 
-            if (diagnalLengthSquare <= diameterSquare) : 
+            if (diagnalLengthSquare < diameterSquare) : 
 
                 rectangles += 1
 

# mutant 24
--- ./program355.py
+++ ./program355.py
@@ -49,7 +49,7 @@
             expected
         ):
             return "PASSED"
-        return "FAILED"
+        return "XXFAILEDXX"
     except Exception as exception_obj:
         return type(exception_obj).__name__
     

